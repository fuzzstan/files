// Code generated by chaosmojo. DO NOT EDIT.
// Rerunning chaosmojo will overwrite this file.
// Version: 1.0
// Version Date:

package svc

// This file provides server-side bindings for the gRPC transport.
// It utilizes the transport/grpc.Server.

import (
	"context"
	"net/http"

	"github.com/chaos-io/gokit/tracing"
	"github.com/go-kit/kit/log"
	grpctransport "github.com/go-kit/kit/transport/grpc"
	"go.opentelemetry.io/otel/trace"
	"google.golang.org/grpc/metadata"

	"github.com/fuzzstan/files/go/pkg/files"
	"github.com/mojo-lang/core/go/pkg/mojo/core"

	// this service api
	pb "github.com/fuzzstan/files/go/pkg/files/v1"
)

var (
	_ = core.Timestamp{}
	_ = files.File{}
	_ = core.Null{}
)

// MakeGRPCServer makes a set of endpoints available as a gRPC FilesServer.
func MakeGRPCServer(endpoints Endpoints, tracer trace.Tracer, logger log.Logger) pb.FilesServer {
	serverOptions := []grpctransport.ServerOption{
		grpctransport.ServerBefore(metadataToContext),
		grpctransport.ServerErrorLogger(logger),
	}

	addTracerOption := func(methodName string) []grpctransport.ServerOption {
		if tracer != nil {
			return append(serverOptions, grpctransport.ServerBefore(tracing.GRPCToContext(tracer, methodName)))
		}
		return serverOptions
	}

	return &grpcServer{
		// Files

		getFiles: grpctransport.NewServer(
			endpoints.GetFilesEndpoint,
			DecodeGRPCGetFilesRequest,
			EncodeGRPCGetFilesResponse,
			addTracerOption("get_files")...,
		),
		getFile: grpctransport.NewServer(
			endpoints.GetFileEndpoint,
			DecodeGRPCGetFileRequest,
			EncodeGRPCGetFileResponse,
			addTracerOption("get_file")...,
		),
		createFile: grpctransport.NewServer(
			endpoints.CreateFileEndpoint,
			DecodeGRPCCreateFileRequest,
			EncodeGRPCCreateFileResponse,
			addTracerOption("create_file")...,
		),
		updateFile: grpctransport.NewServer(
			endpoints.UpdateFileEndpoint,
			DecodeGRPCUpdateFileRequest,
			EncodeGRPCUpdateFileResponse,
			addTracerOption("update_file")...,
		),
		deleteFile: grpctransport.NewServer(
			endpoints.DeleteFileEndpoint,
			DecodeGRPCDeleteFileRequest,
			EncodeGRPCDeleteFileResponse,
			addTracerOption("delete_file")...,
		),
	}
}

// grpcServer implements the FilesServer interface
type grpcServer struct {
	pb.UnimplementedFilesServer

	getFiles   grpctransport.Handler
	getFile    grpctransport.Handler
	createFile grpctransport.Handler
	updateFile grpctransport.Handler
	deleteFile grpctransport.Handler
}

// Methods for grpcServer to implement FilesServer interface

func (s *grpcServer) GetFiles(ctx context.Context, req *pb.GetFilesRequest) (*pb.GetFilesResponse, error) {
	_, rep, err := s.getFiles.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.GetFilesResponse), nil
}

func (s *grpcServer) GetFile(ctx context.Context, req *pb.GetFileRequest) (*files.File, error) {
	_, rep, err := s.getFile.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*files.File), nil
}

func (s *grpcServer) CreateFile(ctx context.Context, req *pb.CreateFileRequest) (*files.File, error) {
	_, rep, err := s.createFile.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*files.File), nil
}

func (s *grpcServer) UpdateFile(ctx context.Context, req *pb.UpdateFileRequest) (*files.File, error) {
	_, rep, err := s.updateFile.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*files.File), nil
}

func (s *grpcServer) DeleteFile(ctx context.Context, req *pb.DeleteFileRequest) (*core.Null, error) {
	_, rep, err := s.deleteFile.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*core.Null), nil
}

// Server Decode

// DecodeGRPCGetFilesRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC GetFiles request to a user-domain GetFiles request. Primarily useful in a server.
func DecodeGRPCGetFilesRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.GetFilesRequest)
	return req, nil
}

// DecodeGRPCGetFileRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC GetFile request to a user-domain GetFile request. Primarily useful in a server.
func DecodeGRPCGetFileRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.GetFileRequest)
	return req, nil
}

// DecodeGRPCCreateFileRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC CreateFile request to a user-domain CreateFile request. Primarily useful in a server.
func DecodeGRPCCreateFileRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.CreateFileRequest)
	return req, nil
}

// DecodeGRPCUpdateFileRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC UpdateFile request to a user-domain UpdateFile request. Primarily useful in a server.
func DecodeGRPCUpdateFileRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.UpdateFileRequest)
	return req, nil
}

// DecodeGRPCDeleteFileRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC DeleteFile request to a user-domain DeleteFile request. Primarily useful in a server.
func DecodeGRPCDeleteFileRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.DeleteFileRequest)
	return req, nil
}

// Server Encode

// EncodeGRPCGetFilesResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain GetFiles response to a gRPC GetFiles reply. Primarily useful in a server.
func EncodeGRPCGetFilesResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.GetFilesResponse)
	return resp, nil
}

// EncodeGRPCGetFileResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain GetFile response to a gRPC GetFile reply. Primarily useful in a server.
func EncodeGRPCGetFileResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*files.File)
	return resp, nil
}

// EncodeGRPCCreateFileResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain CreateFile response to a gRPC CreateFile reply. Primarily useful in a server.
func EncodeGRPCCreateFileResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*files.File)
	return resp, nil
}

// EncodeGRPCUpdateFileResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain UpdateFile response to a gRPC UpdateFile reply. Primarily useful in a server.
func EncodeGRPCUpdateFileResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*files.File)
	return resp, nil
}

// EncodeGRPCDeleteFileResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain DeleteFile response to a gRPC DeleteFile reply. Primarily useful in a server.
func EncodeGRPCDeleteFileResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*core.Null)
	return resp, nil
}

// Helpers

func metadataToContext(ctx context.Context, md metadata.MD) context.Context {
	for k, v := range md {
		if v != nil {
			// The key is added both in metadata format (k) which is all lower
			// and the http.CanonicalHeaderKey of the key so that it can be
			// accessed in either format
			ctx = context.WithValue(ctx, k, v[0])
			ctx = context.WithValue(ctx, http.CanonicalHeaderKey(k), v[0])
		}
	}

	return ctx
}
